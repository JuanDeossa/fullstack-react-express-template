# Puerto de la api
PORT=8080

#---------------------------------

#Url del cliente principal que consumirá la API (  ejem: http://localhost:0000 )
CLIENT_URL=http://localhost:5173

#---------------------------------

#1 lista de otros clientes ( separados por ",,,"", ejem: http://localhost:0001,,,http://localhost:0002,,,http://localhost:0003 )
#2 No es necesario agregar el valor de CLIENT_URL, el codigo ya lo hace.
WHITELIST=

# Limite de registros para usuarios ( Opcional, 1000 por defecto )
USERS_RATE_LIMIT=

# Developer credentials (Importante: credenciales para crear rol desarrollador automaticamente)
DEVELOPER_EMAIL=developer.test@test.com # Cambiar por su correo
DEVELOPER_PASSWORD=654321 # Cambiar por su contraseña

# Super Admin user credentials (Importante: credenciales para crear super administrador automaticamente)
SUPER_ADMIN_EMAIL=superadmin.test@test.com # Cambiar por su correo
SUPER_ADMIN_PASSWORD=654321 # Cambiar por su contraseña

##############
##############
##############

#postgres DB ( USER y PASSWORD necesarias para acceder a la db desde una terminal o cliente)
POSTGRES_USER=
POSTGRES_PASSWORD=

# Nombre de la base de datos (exm: mydb)
POSTGRES_DB=

# tiene que llamarse igual que el servicio de la db en el docker-compose.yml
POSTGRES_HOST=db

POSTGRES_PORT=5432
POSTGRES_SCHEMA=public

#postgres-db url conexion
DATABASE_URL= postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=${POSTGRES_SCHEMA}

#jwt
ACCESS_TOKEN_SECRET=
REFRESH_TOKEN_SECRET=
ACCESS_TOKEN_EXPIRES_IN=3600000 # tiempo en milisegundos ( 3600000 = 1 hora )
REFRESH_TOKEN_EXPIRES_IN=2.592e+9 # tiempo en milisegundos ( 2.592e+9 = 30 dias )